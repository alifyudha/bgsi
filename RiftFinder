local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local UIS = game:GetService("UserInputService")

if not game:IsLoaded() then game.Loaded:Wait() end

task.wait(6)

if game.Players.LocalPlayer.PlayerGui.ScreenGui.Enabled == false then
	game.Players.LocalPlayer.PlayerGui.Intro.Enabled = false
	game.Players.LocalPlayer.PlayerGui.LoadingGui.Enabled = false
	game.Players.LocalPlayer.PlayerGui.ScreenGui.Enabled = true
	game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true)
	game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)
end

local found = false

--////////////////////////////////////////////////////////

function notify(title,text)
	game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = title, -- Required
	Text = text -- Required
})
end

function teleport()
	print("Teleport Attempt")
	httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
	local sort
	local rng = math.random(1,2)
	if rng == 1 then
	     sort = "Asc"
	else
	     sort = "Desc"
	end

	if httprequest then
        local servers = {}
        local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=" ..sort.. "&limit=100&excludeFullGames=true", game.PlaceId)})
        local body = HttpService:JSONDecode(req.Body)

        if body and body.data then
            for i, v in next, body.data do
                if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        if #servers > 0 then
            TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game.Players.LocalPlayer)
        end
    end
end

function sendWebhookNotif(title, description, color)
local response = request( { Url =  Webhook_URL, Method = 'POST', Headers = { ['Content-Type'] = 'application/json' }, Body = HttpService:JSONEncode({ ["content"] = "", ["embeds"] = {{ ["title"] = title, ["description"] = description, ["type"] = "rich", ["color"] = tonumber(color) }} }) } )
end

function spoofEgg(rift)
    if rift == "nightmare-egg" then
    return "Nightmare Egg"
elseif rift == "void-egg" then
    return "Void Egg"
elseif rift == "event-1" then
    return "Bunny Egg"
elseif rift == "event-2" then
    return "Pastel Egg"
elseif rift == "man-egg" then
    return "Aura Egg"
elseif rift == "rainbow-egg" then
    return "Rainbow Egg"
end
end

function OpenEgg(rift)
local egg = spoofEgg(rift)

local args = {
    [1] = "HatchEgg",
    [2] = egg,
    [3] = 6
}
game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(unpack(args))
end

--////////////////////////////////////////////////////////

UIS.InputBegan:Connect(function(inp, proc)
	if proc then return end

	if inp.KeyCode == Enum.KeyCode.X then
		repeat
			local s,f = pcall(function()
				teleport()
				task.wait(4)
			end)
		until found == false
	end
end)

--////////////////////////////////////////////////////////

notify("Finding rifts...", " ")

for i,Rift in workspace.Rendered.Rifts:GetChildren() do
	if table.find(eggs, Rift.Name) then   
		if (Rift.Display.SurfaceGui.Icon.Luck.Text == "x25") or (Rift.Name == "man-egg") then
			local foundEgg = spoofEgg(Rift.Name)
			notify("A rift has been found!", "Found rift:" ..foundEgg)
			sendWebhookNotif("A rift has been found!", "Found rift: " ..foundEgg, 0x008000)

			local Highlight = Instance.new("Highlight")
			Highlight.FillTransparency = 1
			Highlight.Parent = Rift

			found = true
			local RiftExists = true

            repeat
                OpenEgg(Rift.Name)
		if Rift.Display.SurfaceGui.Timer.Text == "0 seconds" then RiftExists = false end
		task.wait(.05)
            until RiftExists == false
	    print("Rift gone")
	    sendWebhookNotif("Rift Ended", "The found rift, " ..foundEgg.. ", has just ended. If you would like to server hop, press X on your keyboard while ingame.", 0xff0000)
		end
	end
end

if not found then
	notify("No rifts found", "Server hopping might take some time")
	task.wait(5)
	repeat
		local s,f = pcall(function()
			teleport()
			task.wait(4)
		end)
	until found == true
end

--////////////////////////////////////////////////////////
