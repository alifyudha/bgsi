local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")

if not game:IsLoaded() then game.Loaded:Wait() end

task.wait(6)

if game.Players.LocalPlayer.PlayerGui.ScreenGui.Enabled == false then
	game.Players.LocalPlayer.PlayerGui.Intro.Enabled = false
	game.Players.LocalPlayer.PlayerGui.LoadingGui.Enabled = false
	game.Players.LocalPlayer.PlayerGui.ScreenGui.Enabled = true
	game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true)
	game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)
end
local found = false

function notify(title,text)
	game:GetService("StarterGui"):SetCore("SendNotification",{
	Title = title, -- Required
	Text = text -- Required
})
end

function teleport()
	httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
	local sort
	local rng = math.random(1,2)
	if rng == 1 then
	     sort = "Asc"
	else
	     sort = "Desc"
	end

	if httprequest then
        local servers = {}
        local req = httprequest({Url = string.format("https://games.roblox.com/v1/games/%d/servers/Public?sortOrder=" ..sort.. "&limit=100&excludeFullGames=true", game.PlaceId)})
        local body = HttpService:JSONDecode(req.Body)

        if body and body.data then
            for i, v in next, body.data do
                if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                    table.insert(servers, 1, v.id)
                end
            end
        end

        if #servers > 0 then
            TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], game.Players.LocalPlayer)
        end
    else
        notify("Incompatible Exploit", "Your exploit does not support this command (missing request)")
    end
end

function sendWebhookNotif(rift)
local response = request( { Url =  Webhook_URL, Method = 'POST', Headers = { ['Content-Type'] = 'application/json' }, Body = HttpService:JSONEncode({ ["content"] = "", ["embeds"] = {{ ["title"] = "A rift has been found!", ["description"] = rift.." has been detected!", ["type"] = "rich", ["color"] = tonumber(0xffffff) }} }) } )
end

function OpenEgg(rift)

local egg

if rift.Name == "nightmare-egg" then
    egg = "Nightmare Egg"
elseif rift.Name == "void-egg" then
    egg = "Void Egg"
elseif rift.Name == "event-1" then
    egg = "Rabbit Egg"
elseif rift.Name == "event-2" then
    egg = "Pastel Egg"
elseif rift.Name == "man-egg" then
    egg = "Aura Egg"
elseif rift.Name == "rainbow-egg" then
    egg = "Rainbow Egg"
end

local args = {
    [1] = "HatchEgg",
    [2] = egg,
    [3] = 6
}
game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(unpack(args))
end

notify("Finding eggs...", " ")

for i,Rift in workspace.Rendered.Rifts:GetChildren() do
	if table.find(eggs, Rift.Name) then   
		if (Rift.Display.SurfaceGui.Icon.Luck.Text == "x25") or Rift.Name == "man-egg" then
			notify("Egg Detected!", "Egg:" ..Rift.Name)
			sendWebhookNotif(Rift.Name)

			local Highlight = Instance.new("Highlight")
			Highlight.FillTransparency = 1
			Highlight.Parent = Rift

			found = true

            repeat
				local part1 = Rift.EggPlatformSpawn.Part
				local part2 = game.Players.LocalPlayer.Character.HumanoidRootPart
                OpenEgg(Rift.Name)
				task.wait(.1)
            until not workspace.Rendered.Rifts:FindFirstChild(Rift.Name)               
		end
	end
end

task.wait(5)

if not found then
	notify("Eggs Undetected", "Might take a while to server hop")
	repeat
		local s,f = pcall(function()
			teleport()
			print("hi")
			task.wait(2)
		end)
	until found == true
end
